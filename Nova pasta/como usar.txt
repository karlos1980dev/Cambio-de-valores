Para criar um banco de dados MongoDB e começar a usá-lo, você pode seguir esses passos básicos. Vou explicar como configurar tanto um banco de dados **local** em seu computador, quanto um banco de dados **na nuvem** com o MongoDB Atlas, que é uma solução popular e gratuita para projetos menores.

### 1. **Instalando o MongoDB Localmente**

#### Passo 1: Baixar e Instalar o MongoDB
- Acesse o [site oficial do MongoDB](https://www.mongodb.com/try/download/community).
- Escolha a versão apropriada para o seu sistema operacional.
- Faça o download e instale o MongoDB. O MongoDB fornece a versão `Community Edition`, que é gratuita e ideal para projetos pequenos e médios.

#### Passo 2: Iniciar o MongoDB no seu Computador
Após a instalação, você pode iniciar o servidor MongoDB.

- **No Windows:**
  - Abra o **Prompt de Comando** (ou **PowerShell**) e digite:
    ```bash
    mongod
    ```
  - O servidor MongoDB será iniciado e estará ouvindo na porta padrão `27017`.

- **No macOS/Linux:**
  - Abra o terminal e digite:
    ```bash
    mongod
    ```
  - O MongoDB estará rodando localmente.

#### Passo 3: Usar o MongoDB
Agora, em um **outro terminal** (não no terminal onde o `mongod` está rodando), digite o seguinte comando para acessar o MongoDB:
```bash
mongo
```

Você verá algo como:
```bash
MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017
```

Isso significa que você está conectado ao banco de dados MongoDB em seu computador.

### 2. **Criando um Banco de Dados no MongoDB**

O MongoDB cria o banco de dados automaticamente quando você tenta usar um banco que ainda não existe.

#### Passo 4: Criar um Banco de Dados
No shell do MongoDB, digite:
```bash
use rifa
```

Isso criará um banco de dados chamado `rifa` (se ele não existir) e o selecionará para uso.

#### Passo 5: Criar uma Coleção (Tabela no MongoDB)
Uma vez dentro do banco de dados `rifa`, você pode criar uma "coleção" (equivalente a uma tabela no banco relacional). Digite:
```bash
db.createCollection("numeros")
```

Agora, você tem uma coleção chamada `numeros` dentro do banco de dados `rifa`.

### 3. **Inserir Dados no MongoDB**

Você pode inserir dados (como números da rifa) diretamente pela interface de linha de comando do MongoDB.

#### Passo 6: Inserir um Documento (Registro)
Por exemplo, para adicionar um número e o nome do usuário que escolheu o número, use:
```bash
db.numeros.insertOne({numero: "01", usuario: "Usuario1"})
```

Isso cria um documento com o número `"01"` e o usuário `"Usuario1"` na coleção `numeros`.

#### Passo 7: Verificar os Dados
Para ver os dados inseridos, use:
```bash
db.numeros.find()
```

Isso irá retornar todos os documentos na coleção `numeros`.

### 4. **Instalando o MongoDB na Nuvem (MongoDB Atlas)**

Se você não deseja instalar o MongoDB localmente, pode optar por usar o MongoDB Atlas, que é uma solução de banco de dados MongoDB na nuvem.

#### Passo 1: Criar uma Conta no MongoDB Atlas
- Acesse [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) e crie uma conta gratuita.
- Após o login, você será levado ao painel de controle.

#### Passo 2: Criar um Cluster
- No painel de controle do Atlas, clique em **Build a Cluster**.
- Escolha a opção **Free Tier** (gratuita), que oferece 512MB de armazenamento.
- Selecione a região de sua preferência e crie o cluster.

#### Passo 3: Criar um Banco de Dados no Atlas
- Após o cluster ser criado, clique em **Connect**.
- Escolha **Connect your application** e siga as instruções para conectar-se via MongoDB Compass (interface gráfica) ou usando seu código, como o Node.js.

### 5. **Conectando sua Aplicação ao MongoDB (Node.js)**

Com o banco de dados criado, você pode conectar sua aplicação Node.js ao MongoDB (seja local ou na nuvem). Para isso, você precisa da biblioteca **Mongoose**.

#### Passo 1: Instalar o Mongoose
No seu projeto Node.js, instale o Mongoose com:
```bash
npm install mongoose
```

#### Passo 2: Conectar-se ao MongoDB
Aqui está um exemplo básico de como se conectar a um banco de dados MongoDB (local ou Atlas) usando Mongoose.

```js
const mongoose = require('mongoose');

// Substitua pela URL de conexão do MongoDB (Atlas ou local)
const uri = 'mongodb://localhost:27017/rifa';  // Local
// Ou use a URL de conexão do MongoDB Atlas:
 // const uri = 'mongodb+srv://<username>:<password>@cluster0.mongodb.net/rifa?retryWrites=true&w=majority';

mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log('Conectado ao MongoDB');
    })
    .catch(err => {
        console.log('Erro ao conectar ao MongoDB', err);
    });
```

#### Passo 3: Criar e Usar um Modelo (Schema)
Com o Mongoose, você pode definir um modelo para os documentos da coleção. Exemplo:

```js
const mongoose = require('mongoose');

// Definir o schema para os números
const numeroSchema = new mongoose.Schema({
    numero: String,
    usuario: String,
    data: { type: Date, default: Date.now }
});

// Criar o modelo para a coleção 'numeros'
const Numero = mongoose.model('Numero', numeroSchema);

// Exemplo de inserção
const novoNumero = new Numero({
    numero: "05",
    usuario: "Usuario1"
});

novoNumero.save()
    .then(() => console.log('Número marcado com sucesso!'))
    .catch(err => console.log('Erro ao marcar número: ', err));
```

#### Passo 4: Consultar os Dados
Você pode buscar os números marcados com:

```js
Numero.find()
    .then(numeros => {
        console.log(numeros);
    })
    .catch(err => console.log('Erro ao buscar números: ', err));
```

### Resumo do Processo:
1. **MongoDB Local**: Instalar o MongoDB na sua máquina, criar um banco e coleções.
2. **MongoDB Atlas**: Criar uma conta, configurar um cluster na nuvem e usar o URI para conectar.
3. **Mongoose**: Usar o Mongoose no backend (Node.js) para manipular dados no MongoDB.

Com isso, você pode criar um banco de dados MongoDB, conectar-se a ele via Node.js, salvar dados e consultar esses dados, criando uma aplicação que registra os números marcados e os usuários.

Se precisar de ajuda com mais detalhes ou com a configuração de algum desses passos, posso te ajudar a configurar tudo!